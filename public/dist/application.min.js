"use strict";var ApplicationConfiguration=function(){var applicationModuleName="salarysurvey",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("salaries"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("salaries").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Salaries","salaries","dropdown","/salaries(/create)?"),Menus.addSubMenuItem("topbar","salaries","List Salaries","salaries"),Menus.addSubMenuItem("topbar","salaries","New Salary","salaries/create")}]),angular.module("salaries").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSalaries",{url:"/salaries",templateUrl:"modules/salaries/views/list-salaries.client.view.html"}).state("createSalary",{url:"/salaries/create",templateUrl:"modules/salaries/views/create-salary.client.view.html"}).state("viewSalary",{url:"/salaries/:salaryId",templateUrl:"modules/salaries/views/view-salary.client.view.html"}).state("editSalary",{url:"/salaries/:salaryId/edit",templateUrl:"modules/salaries/views/edit-salary.client.view.html"})}]),angular.module("salaries").controller("SalariesFilterController",["$scope","Salaries","$filter","Authentication","$location",function($scope,Salaries,$filter,Authentication,$location){$scope.authentication=Authentication;var Salary=Salaries.query();$scope.initSalaryFunctions=function(newData){Salary.$promise.then(function(data){newData?(console.log("New data has come in",newData),data=newData):(console.log("Using data with no filters",data),$scope.rawData=data);var jobTitlesArr=[{name:"Bid Manager"},{name:"Document Manager"},{name:"Graphic Designer"},{name:"Head of Bid Management"},{name:"Head of Proposal Management"},{name:"Knowledgebase Manager"},{name:"Proposal Manager"},{name:"Proposal Writer"}];$scope.dataByJobTitles=[],angular.forEach(jobTitlesArr,function(value,key){$scope.dataByJobTitles.push({name:value.name,salary:{average:$scope.calculateAverage("salary",$scope.filterData(value.name,"bs_job_title",data)),median:$scope.calculateMedian($scope.filterData(value.name,"bs_job_title",data)),maximum:$scope.calculateMinMaxValue("max",$scope.filterData(value.name,"bs_job_title",data)),minimum:$scope.calculateMinMaxValue("min",$scope.filterData(value.name,"bs_job_title",data))},average_age:$scope.calculateAverage("age",$scope.filterData(value.name,"bs_job_title",data))})}),console.log("Populate our graph;",$scope.dataByJobTitles),$scope.populateDataColumn($scope.dataByJobTitles)})},$scope.filterData=function(filter,prop,data){var result=[];return angular.forEach(data,function(value,key){value[prop]===filter&&result.push(value)}),result},$scope.populateDataColumn=function(data){$scope.dataColumns=[{name:"Minimum Basic Salary",type:"column",yAxis:1,data:$scope.pickData("salary","minimum",data),tooltip:{valueSuffix:"(GBP)"}},{name:"Average Basic Salary",type:"column",yAxis:1,data:$scope.pickData("salary","average",data),tooltip:{valueSuffix:"(GBP)"}},{name:"Median Basic Salary",type:"column",yAxis:1,data:$scope.pickData("salary","median",data),tooltip:{valueSuffix:"(GBP)"}},{name:"Maximum Basic Salary",type:"column",yAxis:1,data:$scope.pickData("salary","maximum",data),tooltip:{valueSuffix:"(GBP)"}},{name:"Average Age",type:"spline",data:$scope.pickData("average_age","",data),tooltip:{valueSuffix:""}}]},$scope.pickData=function(prop,type,data){return data.map(function(o){return""!==type?o[prop][type]:parseInt(o[prop])||0})},$scope.calculateAverage=function(prop,data){var totalValue=0;return angular.forEach(data,function(value,key){totalValue+=value[prop]}),parseInt(Math.floor(totalValue/data.length))||0},$scope.calculateMinMaxValue=function(prop,data){var values=data.map(function(o){return o.salary}).filter(function(val){return null!==val});return parseInt(Math[prop].apply(Math,values))||0},$scope.calculateMedian=function(data){var values=data.map(function(o){return o.salary});values.sort(function(a,b){return a-b});var half=Math.floor(values.length/2);return values.length%2?parseInt(values[half])||0:parseInt((values[half-1]+values[half])/2)||0},$scope.filterUpdate=function(){$scope.copiedChartData=angular.copy($scope.rawData),$scope.initSalaryFunctions($filter("filter")($scope.copiedChartData,$scope.salary))}}]),angular.module("salaries").controller("SalariesFilteredController",["$scope","SalariesFiltered","$filter","Authentication","$location",function($scope,SalariesFiltered,$filter,Authentication,$location){$scope.chartUpdate=function(){console.log($scope.salary);var Salary=new SalariesFiltered.query($scope.salary);Salary.$promise.then(function(data){$scope.chartData=data[0].chart,$scope.tableData=data[0].table})},$scope.filterUpdate=function(){angular.forEach($scope.salary,function(value,key){""===value&&delete $scope.salary[key]}),$scope.chartUpdate()}}]),angular.module("salaries").controller("SalariesController",["$scope","$stateParams","$location","$filter","Authentication","Salaries",function($scope,$stateParams,$location,$filter,Authentication,Salaries){$scope.authentication=Authentication,$scope.create=function(){var salary=new Salaries({name:this.name,salary:this.salary,day_charge_rate:this.day_charge_rate,total_value:this.total_value,bonus:this.bonus,gender:this.gender,age:this.age,employment_location:this.employment_location,employment_type:this.employment_type,employment_status:this.employment_status,working_practice:this.working_practice,total_contract_earnings:this.total_contract_earnings,bs_job_title:this.bs_job_title,contract_job_title:this.contract_job_title,highest_education:this.highest_education,industry_experience:this.industry_experience,primary_industry:this.primary_industry});salary.$save(function(response){$location.path("salaries/"+response._id),$scope.name="",$scope.salary="",$scope.bonus="",$scope.gender="",$scope.employment_location="",$scope.employment_type="",$scope.employment_role=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(salary){if(salary){salary.$remove();for(var i in $scope.salaries)$scope.salaries[i]===salary&&$scope.salaries.splice(i,1)}else $scope.salary.$remove(function(){$location.path("salaries")})},$scope.update=function(){var salary=$scope.salary;salary.$update(function(){$location.path("salaries/"+salary._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.salaries=Salaries.query()},$scope.findOne=function(){$scope.salary=Salaries.get({salaryId:$stateParams.salaryId})}}]),angular.module("salaries").directive("salaryBarchart",[function(){return{template:"<div></div>",restrict:"E",scope:{chartData:"="},controller:["scope","element","attrs",function(scope,element,attrs){scope.$watch("chartData",function(){drawPlot()});var drawPlot=function(){new Highcharts.Chart({chart:{renderTo:element[0]},title:{text:" "},subtitle:{text:""},xAxis:[{categories:["Bid Manager","Document Manager","Graphic Designer","Head of Bid Management","Head of Proposal Management","Knowledgebase Manager","Proposal Manager","Proposal Writer"]}],yAxis:[{title:{text:"Age",style:{color:Highcharts.getOptions().colors[1]}},labels:{format:"{value}",style:{color:Highcharts.getOptions().colors[1]}},opposite:!0},{title:{text:"GBP",style:{color:Highcharts.getOptions().colors[1]}},labels:{format:"£ {value}",style:{color:Highcharts.getOptions().colors[1]}}}],tooltip:{shared:!0},legend:{layout:"horizontal",align:"center",x:0,y:20,verticalAlign:"top",floating:!0,backgroundColor:Highcharts.theme&&Highcharts.theme.legendBackgroundColor||"#FFFFFF"},series:scope.chartData})}}]}}]),angular.module("salaries").factory("SalariesFiltered",["$resource",function($resource){return $resource("salaries/search")}]),angular.module("salaries").factory("Salaries",["$resource",function($resource){return $resource("salaries/:salaryId",{salaryId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);